
LDA {{
READ;
A = data;
SETNZ;
}}

STA {{
data = A;
WRITE;
}}

LDX {{
READ;
X = data;
SETNZ;
}}

STX {{
data = X;
WRITE;
}}

LDY {{
READ;
Y = data;
SETNZ;
}}

STY {{
data = Y;
WRITE;
}}

AND {{
READ;
data &= A;
A = data;
SETNZ;
}}

ORA {{
READ;
data |= A;
A = data;
SETNZ;
}}

EOR {{
READ;
data ^= A;
A = data;
SETNZ;
}}

BIT {{
Nes.ActiveNes.RecordEvent("Cpu.Instr.BIT");
READ;
N = (data & 0x80)!=0; // bit 7
V = (data & 0x40)!=0; // bit 6
Z = (A & data) == 0;
}}

CMP {{
READ;
C = A >= data;
data = (byte)(A - data);
SETNZ;
}}

CPX {{
READ;
C = X >= data;
data = (byte)(X - data);
SETNZ;
}}

CPY {{
READ;
C = Y >= data;
data = (byte)(Y - data);
SETNZ;
}}

ADC {{
READ;
int result = A + data + (C?1:0);
C = (result & 0xFF00) != 0;
V = ( (~(A ^ data) & (A ^ (byte)result)) &0x80) != 0;
data = A = (byte)result;
SETNZ;
}}

SBC {{
READ;
int result = A - data - (C?0:1);
C = (result & 0xFF00) == 0;
V = ( ((A ^ data) & (A ^ (byte)result)) &0x80) != 0;
data = A = (byte)result;
SETNZ;
}}

ASL {{
READ;
C = (data & 0x80)!=0;
data <<= 1;
WRITE;
SETNZ;
}}

LSR {{
READ;
C = (data & 0x01)!=0;
data >>= 1;
WRITE;
SETNZ;
}}

ROL {{
READ;
bool oldC = C;
C = (data & 0x80)!=0;
data <<= 1;
if(oldC) data |= 1;
WRITE;
SETNZ;
}}

ROR {{
READ;
bool oldC = C;
C = (data & 0x01)!=0;
data >>= 1;
if(oldC) data |= 0x80;
WRITE;
SETNZ;
}}

INC {{
READ;
++data;
WRITE;
SETNZ;
}}

DEC {{
READ;
--data;
WRITE;
SETNZ;
}}

JMP {{
NPC = addr;
}}

JSR {{
PushWord((ushort)(NPC-1));
NPC = addr;
}}

BRK {{
Nes.ActiveNes.RecordEvent("Cpu.Instr.BRK");

//Console.WriteLine("${0:X4}: BRK", PC);
// 2nd byte after BRK is skipped
NPC++;
// This is essentially the same as IRQ, except we set the B flag in
// the saved status register copy on-stack.
PushWord(NPC);
PushStatus(true);
I = true;
NPC = ReadWord(IRQAddr);
}}

RTS {{
NPC = (ushort)(PullWord()+1);
}}

RTI {{
Nes.ActiveNes.RecordEvent("Cpu.Instr.RTI");
//Console.WriteLine("${0:X4}: RTI", PC);
PullStatus();
NPC = PullWord();
}}

PHP {{
Nes.ActiveNes.RecordEvent("Cpu.Instr.PHP");
//Console.WriteLine("${0:X4}: PHP", PC);
PushStatus(true); // PHP writes the B flag as well
}}

PLP {{
Nes.ActiveNes.RecordEvent("Cpu.Instr.PLP");
//Console.WriteLine("${0:X4}: PLP", PC);
PullStatus();
}}


PHA {{
Push(A);
}}

PLA {{
data = Pull();
A = data;
SETNZ;
}}

INX {{
X++;
data = X;
SETNZ;
}}

DEX {{
X--;
data = X;
SETNZ;
}}

INY {{
Y++;
data = Y;
SETNZ;
}}

DEY {{
Y--;
data = Y;
SETNZ;
}}

TAX {{
data = A;
X = data;
SETNZ;
}}

TXA {{
data = X;
A = data;
SETNZ;
}}

TAY {{
data = A;
Y = data;
SETNZ;
}}

TYA {{
data = Y;
A = data;
SETNZ;
}}

TSX {{
data = SP;
X = data;
SETNZ;
}}

TXS {{
SP = X;
}}

SED {{
Nes.ActiveNes.RecordEvent("Cpu.Instr.SED");
//Console.WriteLine("${0:X4}: SED", PC);
D=true;
}}

CLD {{
Nes.ActiveNes.RecordEvent("Cpu.Instr.CLD");
//Console.WriteLine("${0:X4}: CLD", PC);
D=false;
}}

SEI {{
Nes.ActiveNes.RecordEvent("Cpu.Instr.SEI");
//Console.WriteLine("${0:X4}: SEI", PC);
I = true;
}}

CLI {{
Nes.ActiveNes.RecordEvent("Cpu.Instr.CLI");
//Console.WriteLine("${0:X4}: CLI", PC);
I = false;
}}

SEC {{
C = true;
}}

CLC {{
C = false;
}}

CLV {{
V = false;
}}

BEQ {{
BRANCH(Z);
}}

BNE {{
BRANCH(!Z);
}}

BMI {{
BRANCH(N);
}}

BPL {{
BRANCH(!N);
}}

BCC {{
BRANCH(!C);
}}

BCS {{
BRANCH(C);
}}

BVC {{
BRANCH(!V);
}}

BVS {{
BRANCH(V);
}}

NOP {{
// do-nothing
}}